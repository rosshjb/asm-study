Microsoft (R) Macro Assembler Version 14.35.32216.1	    07/13/23 20:02:32
4-3-1.asm						     Page 1 - 1


				; 4-3-1.asm

				.386
				.model flat, stdcall
				.stack 4096

				ExitProcess proto, dwExitCode:dword

 00000000			.code
 00000000			main proc
				; 4-3-1
 00000000			.data
 00000000 00			    bval1 byte  ?
 00000001 0000			    wval1 word  ?
 00000003 00000000		    dval1 dword ?
 00000007 00000000		    dval2 dword ?
 00000000			.code
 00000000  BE 00000000 R	    mov esi, offset bval1   ; esi = 003d4000h
 00000005  BE 00000001 R	    mov esi, offset wval1   ; esi = 003d4001h
 0000000A  BE 00000003 R	    mov esi, offset dval1   ; esi = 003d4003h
 0000000F  BE 00000007 R	    mov esi, offset dval2   ; esi = 003d4007h

 0000000B			.data
 0000000B 0001 0002 0003	    myArray1 word 1, 2, 3, 4, 5
	   0004 0005
 00000014			.code
 00000014  BE 0000000B R	    mov esi, offset myArray1     ; esi = 00d5400bh
 00000019  BE 0000000F R	    mov esi, offset myArray1 + 4 ; esi = 00d5400fh

 00000015			.data
 00000015  000001F4 [		    bigArray dword 500 dup(?)
	    00000000
	   ]
 000007E5 00000015 R		    pArray dword bigArray
 0000001E			.code
 0000001E  8B 35 000007E5 R	    mov esi, pArray             ; esi = 000b4015h

				; 4-3-2
 000007E9			.data
 000007E9 00			    bval2 byte  ?
				    align 2
 000007EA 0000			    wval2 word  ?
 000007EC 00			    bval3 byte  ?
				    align 4
 000007F0 00000000		    dval3 dword ?
 000007F4 00000000		    dval4 dword ?
 00000024			.code
 00000024  BE 000007E9 R	    mov esi, offset bval2 ; esi = 000347e9h
 00000029  BE 000007EA R	    mov esi, offset wval2 ; esi = 000347eah
 0000002E  BE 000007EC R	    mov esi, offset bval3 ; esi = 000347ech
 00000033  BE 000007F0 R	    mov esi, offset dval3 ; esi = 000347f0h
 00000038  BE 000007F4 R	    mov esi, offset dval4 ; esi = 000347f4h

				; 4-3-3
 000007F8			.data
 000007F8 12345678		    myDouble dword 12345678h
 000007FC 5678 1234		    wordList word 5678h, 1234h
 0000003D			.code
 0000003D  66| A1		    mov ax, word ptr myDouble       ; 5678h
	   000007F8 R
 00000043  66| A1		    mov ax, word ptr [myDouble + 2] ; 1234h
	   000007FA R
 00000049  8A 1D 000007F8 R	    mov bl, byte ptr myDouble       ; 78h
 0000004F  A1 000007FC R	    mov eax, dword ptr wordList     ; 12345678h

				; 4-3-4
 00000800			.data
 00000800 00			    var1 byte  ?
 00000801 0000			    var2 word  ?
 00000803 00000000		    var3 dword ?
 00000807			    var4 qword ?
	   0000000000000000
 00000054			.code
 00000054  B8 00000001		    mov eax, type var1  ; eax = 1
 00000059  B8 00000002		    mov eax, type var2  ; eax = 2
 0000005E  B8 00000004		    mov eax, type var3  ; eax = 4
 00000063  B8 00000008		    mov eax, type var4  ; eax = 8

				; 4-3-5
 0000080F			.data
 0000080F 0A 14 1E		    byte1  byte   10, 20, 30
 00000812  0000001E [		    array1 word   30 dup(?), 0, 0
	    0000
	   ] 0000 0000
 00000852  00000005 [		    array2 word   5 dup(3 dup(?))
	    00000003 [
	     0000
	    ]
	   ]
 00000870 00000001		    array3 dword  1, 2, 3, 4
	   00000002
	   00000003
	   00000004
 00000880 31 32 33 34 35	    digitStr byte "12345678", 0
	   36 37 38 00
 00000068			.code
 00000068  B8 00000003		    mov eax, lengthof byte1     ; eax = 3
 0000006D  B8 00000020		    mov eax, lengthof array1    ; eax = 32
 00000072  B8 0000000F		    mov eax, lengthof array2    ; eax = 15
 00000077  B8 00000004		    mov eax, lengthof array3    ; eax = 4
 0000007C  B8 00000009		    mov eax, lengthof digitStr  ; eax = 9

 00000889			.data
 00000889 0A 14 1E 28 32	    myArray2 byte 10, 20, 30, 40, 50
 0000088E  3C 46 50 5A 64	             byte 60, 70, 80, 90, 100

 00000893 0A 14 1E 28 32	    myArray3 byte 10, 20, 30, 40, 50,
	   3C 46 50 5A 64
				                  60, 70, 80, 90, 100
 00000081			.code
 00000081  B8 00000005		    mov eax, lengthof myArray2  ; eax = 5
 00000086  B8 0000000A		    mov eax, lengthof myArray3  ; eax = 10

				; 4-3-6
 0000089D			.data
 0000089D  00000020 [		    intArray word 32 dup(0)
	    0000
	   ]
 0000008B			.code
 0000008B  B8 00000040		    mov eax, sizeof intArray    ; eax = 64

				; 4-3-7
 000008DD			.data
 000008DD			    val16 label word
 000008DD 12345678		    val32 dword      12345678h

 000008E1			    longvalue label dword
 000008E1 5678			    val1 word 5678h
 000008E3 1234			    val2 word 1234h
 00000090			.code
 00000090  66| A1		    mov ax, val16       ; ax = 5678h
	   000008DD R
 00000096  66| 8B 15		    mov dx, [val16 + 2] ; ax = 1234h
	   000008DF R

 0000009D  A1 000008E1 R	    mov eax, longvalue  ; eax = 12345678h

				    invoke ExitProcess, 0
 000000A2  6A 00	   *	    push   +000000000h
 000000A4  E8 00000000 E   *	    call   ExitProcess
 000000A9			main endp
				end main
Microsoft (R) Macro Assembler Version 14.35.32216.1	    07/13/23 20:02:32
4-3-1.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000008E5 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000A9 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A9 Public STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
array1 . . . . . . . . . . . . .	Word	 00000812 _DATA	
array2 . . . . . . . . . . . . .	Word	 00000852 _DATA	
array3 . . . . . . . . . . . . .	DWord	 00000870 _DATA	
bigArray . . . . . . . . . . . .	DWord	 00000015 _DATA	
bval1  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
bval2  . . . . . . . . . . . . .	Byte	 000007E9 _DATA	
bval3  . . . . . . . . . . . . .	Byte	 000007EC _DATA	
byte1  . . . . . . . . . . . . .	Byte	 0000080F _DATA	
digitStr . . . . . . . . . . . .	Byte	 00000880 _DATA	
dval1  . . . . . . . . . . . . .	DWord	 00000003 _DATA	
dval2  . . . . . . . . . . . . .	DWord	 00000007 _DATA	
dval3  . . . . . . . . . . . . .	DWord	 000007F0 _DATA	
dval4  . . . . . . . . . . . . .	DWord	 000007F4 _DATA	
intArray . . . . . . . . . . . .	Word	 0000089D _DATA	
longvalue  . . . . . . . . . . .	DWord	 000008E1 _DATA	
myArray1 . . . . . . . . . . . .	Word	 0000000B _DATA	
myArray2 . . . . . . . . . . . .	Byte	 00000889 _DATA	
myArray3 . . . . . . . . . . . .	Byte	 00000893 _DATA	
myDouble . . . . . . . . . . . .	DWord	 000007F8 _DATA	
pArray . . . . . . . . . . . . .	DWord	 000007E5 _DATA	
val16  . . . . . . . . . . . . .	Word	 000008DD _DATA	
val1 . . . . . . . . . . . . . .	Word	 000008E1 _DATA	
val2 . . . . . . . . . . . . . .	Word	 000008E3 _DATA	
val32  . . . . . . . . . . . . .	DWord	 000008DD _DATA	
var1 . . . . . . . . . . . . . .	Byte	 00000800 _DATA	
var2 . . . . . . . . . . . . . .	Word	 00000801 _DATA	
var3 . . . . . . . . . . . . . .	DWord	 00000803 _DATA	
var4 . . . . . . . . . . . . . .	QWord	 00000807 _DATA	
wordList . . . . . . . . . . . .	Word	 000007FC _DATA	
wval1  . . . . . . . . . . . . .	Word	 00000001 _DATA	
wval2  . . . . . . . . . . . . .	Word	 000007EA _DATA	

	   0 Warnings
	   0 Errors
