Microsoft (R) Macro Assembler Version 14.35.32216.1	    07/21/23 15:36:24
	7-1-2.as					     Page 1 - 1


				title 7-1-2.asm

				.386
				.model flat, stdcall
				.stack 4096

				ExitProcess proto, dwExitCode:dword

 00000000			.code
 00000000			main proc
				; 7-1-2
 00000000  B3 8F		    mov bl, 8Fh         ; BL = 10001111b
 00000002  D0 E3		    shl bl, 1           ; CF = 1, BL = 00011110b

 00000004  B0 80		    mov al, 10000000b
 00000006  C0 E0 02		    shl al, 2           ; CF = 0, AL = 00000000b

 00000009  B2 05		    mov dl, 5           ; DL = 00000101b = 5d
 0000000B  D0 E2		    shl dl, 1           ; DL = 00001010b = 10d

 0000000D  B2 0A		    mov dl, 10          ; before: 00001010b = 10d
 0000000F  C0 E2 02		    shl dl, 2           ; after : 00101000b = 40d

				; 7-1-3
 00000012  B0 D0		    mov al, 0D0h        ; AL = 11010000b
 00000014  D0 E8		    shr al, 1           ; AL = 01101000b, CF = 0

 00000016  B0 02		    mov al, 00000010b
 00000018  C0 E8 02		    shr al, 2           ; AL = 00000000b, CF = 1

 0000001B  B2 20		    mov dl, 32          ; DL = 00100000b = 32d
 0000001D  D0 EA		    shr dl, 1           ; DL = 00010000b = 16d

 0000001F  B0 40		    mov al, 01000000b   ; AL = 64d
 00000021  C0 E8 03		    shr al, 3           ; divide by 8, AL = 00001000b = 8d

				; 7-1-4
 00000024  B0 F0		    mov al, 0F0h        ; AL = 11110000b = -16d
 00000026  D0 F8		    sar al, 1           ; AL = 11111000b = -8d, CF = 0
				    
 00000028  B2 80		    mov dl, -128        ; DL = 10000000b = -128d
 0000002A  C0 FA 03		    sar dl, 3           ; DL = 11110000b = -16d

 0000002D  66| B8 FF80		    mov ax, -128        ; EAX = ????FF80h
 00000031  C1 E0 10		    shl eax, 16         ; EAX = FF800000h
 00000034  C1 F8 10		    sar eax, 16         ; EAX = FFFFFF80h

				; 7-1-5
 00000037  B0 40		    mov al, 40h         ; AL = 01000000b
 00000039  D0 C0		    rol al, 1           ; AL = 10000000b, CF = 0
 0000003B  D0 C0		    rol al, 1           ; AL = 00000001b, CF = 1
 0000003D  D0 C0		    rol al, 1           ; AL = 00000010b, CF = 0

 0000003F  B0 20		    mov al, 00100000b
 00000041  C0 C0 03		    rol al, 3           ; CF = 1, AL = 00000001b

 00000044  B0 26		    mov al, 26h
 00000046  C0 C0 04		    rol al, 4           ; AL = 62h

 00000049  66| B8 6A4B		    mov ax, 6A4Bh
 0000004D  66| C1 C0 04		    rol ax, 4           ; AX = A4B6h
 00000051  66| C1 C0 04		    rol ax, 4           ; AX = 4B6Ah
 00000055  66| C1 C0 04		    rol ax, 4           ; AX = B6A4h
 00000059  66| C1 C0 04		    rol ax, 4           ; AX = 6A4Bh

				; 7-1-6
 0000005D  B0 01		    mov al, 01h         ; AL = 00000001b
 0000005F  D0 C8		    ror al, 1           ; AL = 10000000b, CF = 1
 00000061  D0 C8		    ror al, 1           ; AL = 01000000b, CF = 0

 00000063  B0 04		    mov al, 00000100b
 00000065  C0 C8 03		    ror al, 3           ; AL = 10000000b, CF = 1

				; 7-1-7
 00000068  F8			    clc                 ; CF = 0
 00000069  B3 88		    mov bl, 88h         ; CF, BL = 0 10001000b
 0000006B  D0 D3		    rcl bl, 1           ; CF, BL = 1 00010000b
 0000006D  D0 D3		    rcl bl, 1           ; CF, BL = 0 00100001b

 00000000			.data
 00000000 6A			    testval byte 01101010b
 0000006F			.code
 0000006F  D0 2D 00000000 R	    shr testval, 1      ; shift LSB into Carry flag
 00000075  72 0B		    jc exit             ; exit if Carry flag set
 00000077  D0 15 00000000 R	    rcl testval, 1      ; else restore the number
 0000007D  A0 00000000 R	    mov al, testval
 00000082			exit:
 00000082  90			    nop

 00000083  F9			    stc                 ; CF = 1
 00000084  B4 10		    mov ah, 10h         ; AH, CF = 00010000 1
 00000086  D0 DC		    rcr ah, 1           ; AH, CF = 10001000 0

				; 7-1-8
 00000088  B0 7F		    mov al, +127        ; AL = 01111111b
 0000008A  D0 C0		    rol al, 1           ; OF = 1, AL = 11111111b

 0000008C  B0 80		    mov al, -128        ; AL = 10000000b
 0000008E  D0 E8		    shr al, 1           ; OF = 1, AL = 01000000b

				; 7-1-9
 00000001			.data
 00000001 9BA6			    wval word 9BA6h
 00000090			.code
 00000090  66| B8 AC36		    mov ax, 0AC36h
 00000094  66| 0F A4 05		    shld wval, ax, 4    ; wval = BA6Ah
	   00000001 R 04

 0000009D  66| B8 234B		    mov ax, 234Bh
 000000A1  66| BA 7654		    mov dx, 7654h
 000000A5  66| 0F AC D0		    shrd ax, dx, 4      ; AX = 4234h
	   04

 00000003			.data
 00000003 648B2165		    array1 dword 648B2165h, 8C943A29h, 6DFA4B86h, 91F76C04h, 8BAF9857h
	   8C943A29
	   6DFA4B86
	   91F76C04
	   8BAF9857
 000000AA			.code
 000000AA  B3 04		    mov bl, 4                       ; shift count
 000000AC  BE 00000003 R	    mov esi, offset array1          ; offset of the array
 000000B1  B9 00000004		    mov ecx, (lengthof array1) - 1  ; number of array elements
 000000B6  51			L1: push ecx                        ; save loop counter
 000000B7  8B 46 04		    mov eax, [esi + type dword]
 000000BA  8A CB		    mov cl, bl                      ; shift count
 000000BC  0F AD 06		    shrd [esi], eax, cl             ; shift EAX into high bits of [ESI]

 000000BF  83 C6 04		    add esi, type dword             ; point to next doubleword pair
 000000C2  59			    pop ecx                         ; restore loop counter
 000000C3  E2 F1		    loop L1

 000000C5  C1 2E 04		    shr dword ptr [esi], 4          ; shift the last doubleword

 000000C8  B9 00000000		    mov ecx, 0
 000000CD  E8 00000000 E	    call ExitProcess
 000000D2			main endp

				end main
Microsoft (R) Macro Assembler Version 14.35.32216.1	    07/21/23 15:36:24
	7-1-2.as					     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000017 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000D2 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000D2 Public STDCALL
  exit . . . . . . . . . . . . .	L Near	 00000082 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 000000B6 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
array1 . . . . . . . . . . . . .	DWord	 00000003 _DATA	
testval  . . . . . . . . . . . .	Byte	 00000000 _DATA	
wval . . . . . . . . . . . . . .	Word	 00000001 _DATA	

	   0 Warnings
	   0 Errors
