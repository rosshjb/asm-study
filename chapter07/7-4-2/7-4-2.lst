Microsoft (R) Macro Assembler Version 14.35.32216.1	    07/23/23 06:23:49
&Extended Addition Example (extadd.asm			     Page 1 - 1


				title Extended Addition Example (extadd.asm)

				.386
				.model flat, stdcall
				.stack 4096

				ExitProcess proto, dwExitCode:dword
				Crlf proto
				WriteHexB proto
				WaitMsg proto

 00000000			.data
 00000000 34 12 98 74 06	    op1 byte 34h, 12h, 98h, 74h, 06h, 0A4h, 0B2h, 0A2h
	   A4 B2 A2
 00000008 02 45 23 00 00	    op2 byte 02h, 45h, 23h, 00h, 00h,  87h,  10h,  80h
	   87 10 80
 00000010  00000009 [		    sum byte 9 dup(?)       ; 01.22C32B06.74BB5736h
	    00
	   ]
 00000000			.code
 00000000			main proc
				    ; add two integers
 00000000  BE 00000000 R	    mov esi, offset op1     ; first operand
 00000005  BF 00000008 R	    mov edi, offset op2     ; second operand
 0000000A  BB 00000010 R	    mov ebx, offset sum     ; sum operand
 0000000F  B9 00000008		    mov ecx, lengthof op1   ; number of bytes
 00000014  E8 00000023		    call Extended_Add

				    ; display the sum
 00000019  BE 00000010 R	    mov esi, offset sum
 0000001E  B9 00000009		    mov ecx, lengthof sum
 00000023  E8 00000031		    call Display_Sum
 00000028  E8 00000000 E	    call Crlf
 0000002D  E8 00000000 E	    call WaitMsg

 00000032  B9 00000000		    mov ecx, 0
 00000037  E8 00000000 E	    call ExitProcess
 0000003C			main endp

				;-------------------------------------------------------------------------------
 0000003C			Extended_Add proc
				;
				; Calculates the sum of two extended integers stored as arrays of bytes.
				; Receives: ESI and EDI point to the two integers, EBX points to a variable
				;           that will hold the sum, and ECX indicates the number of bytes
				;           to be added.
				; Storage for the sum must be one byte longer than the input operands.
				; Returns: nothing
				;-------------------------------------------------------------------------------
 0000003C  60			    pushad
 0000003D  F8			    clc                     ; clear the Carry flag
				    
 0000003E  8A 06		L1: mov al, [esi]           ; get the first integer
 00000040  12 07		    adc al, [edi]           ; add the second integer
 00000042  9C			    pushfd                  ; save the Carry flag
 00000043  88 03		    mov [ebx], al           ; store partial sum
 00000045  83 C6 01		    add esi, 1              ; advance all three pointers
 00000048  83 C7 01		    add edi, 1
 0000004B  83 C3 01		    add ebx, 1
 0000004E  9D			    popfd                   ; restore the Carry flag
 0000004F  E2 ED		    loop L1                 ; repeat the loop

 00000051  C6 03 00		    mov byte ptr [ebx], 0   ; clear high byte of sum
 00000054  80 13 00		    adc byte ptr [ebx], 0   ; add any leftover carry

 00000057  61			    popad
 00000058  C3			    ret
 00000059			Extended_Add endp

				;-------------------------------------------------------------------------------
 00000059			Display_Sum proc
				;
				; Displays a large integer that is stored in little endian order (LSB to MSB).
				; The output displays the array in hexadecimal, starting with the most
				; significant byte.
				; Receives: ESI points to the array, ECX is the array size
				; Returns: nothing
				;-------------------------------------------------------------------------------
 00000059  60			    pushad

				    ; point to the last array element
 0000005A  03 F1		    add esi, ecx
 0000005C  83 EE 01		    sub esi, type byte
					
 0000005F  8A 06		L1:	mov al, [esi]           ; get an array byte
 00000061  E8 00000000 E	    call WriteHexB          ; display it
 00000066  83 EE 01		    sub esi, type byte      ; point to previous byte
 00000069  E2 F4		    loop L1

 0000006B  61			    popad
 0000006C  C3			    ret
 0000006D			Display_Sum endp

				end main
Microsoft (R) Macro Assembler Version 14.35.32216.1	    07/23/23 06:23:49
&Extended Addition Example (extadd.asm			     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000019 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000006D DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Display_Sum  . . . . . . . . . .	P Near	 00000059 _TEXT	Length= 00000014 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000005F _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Extended_Add . . . . . . . . . .	P Near	 0000003C _TEXT	Length= 0000001D Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000003E _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000003C Public STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
op1  . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
op2  . . . . . . . . . . . . . .	Byte	 00000008 _DATA	
sum  . . . . . . . . . . . . . .	Byte	 00000010 _DATA	

	   0 Warnings
	   0 Errors
