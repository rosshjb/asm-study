Microsoft (R) Macro Assembler Version 14.35.32216.1	    07/12/23 19:53:12
4-1-3.asm						     Page 1 - 1


				; 4-1-3.asm

				.386
				.model flat, stdcall
				.stack 4096

				ExitProcess proto, dwExitCode:dword

 00000000			.data
				    ; 4-1-3
 00000000 10			    var1 byte 10h

				    ; 4-1-4
 00000001 1234			    var2 word 1234h
 00000003 0000			    var3 word ?

 00000005 78			    oneByte byte 78h
 00000006 1234			    oneWord word 1234h
 00000008 12345678		    oneDword dword 12345678h

				    ; 4-1-5
 0000000C 0001			    count word 1

 0000000E FFF0			    signedVal sword -16

 00000000			.code
 00000000			main proc
				    ; 4-1-3
 00000000  B8 00000000		    mov eax, 0
 00000005  A0 00000000 R	    mov al, var1

 0000000A  B8 00000000		    mov eax, 0
 0000000F  A0 00000000 R	    mov al, [var1]

				    ; 4-1-4
 00000014  B8 00000000		    mov eax, 0
 00000019  66| A1		    mov ax, var2
	   00000001 R
 0000001F  66| A3		    mov var3, ax
	   00000003 R

 00000025  B8 00000000		    mov eax, 0          ; eax = 00000000h
 0000002A  A0 00000005 R	    mov al, oneByte     ; eax = 00000078h
 0000002F  66| A1		    mov ax, oneWord     ; eax = 00001234h
	   00000006 R
 00000035  A1 00000008 R	    mov eax, oneDword   ; eax = 12345678h
 0000003A  66| B8 0000		    mov ax, 0           ; eax = 12340000h

				    ; 4-1-5
 0000003E  B9 00000000		    mov ecx, 0
 00000043  66| 8B 0D		    mov cx, count
	   0000000C R

 0000004A  B9 00000000		    mov ecx, 0
 0000004F  66| 8B 0D		    mov cx, signedVal   ; 0000fff0h
	   0000000E R

 00000056  B9 FFFFFFFF		    mov ecx, 0ffffffffh
 0000005B  66| 8B 0D		    mov cx, signedVal   ; fffffff0h
	   0000000E R

 00000010			.data
 00000010 8F			    byteVal1 byte 10001111b
 00000062			.code
 00000062  B8 0000FFFF		    mov eax, 0ffffh     ; eax = 0000ffffh
 00000067  66| 0F B6 05		    movzx ax, byteVal1  ; eax = 0000008fh
	   00000010 R

 0000006F  66| BB A69B		    mov bx, 0a69bh
 00000073  0F B7 C3		    movzx eax, bx       ; eax = 0000a69bh
 00000076  0F B6 D3		    movzx edx, bl       ; edx = 0000009bh
 00000079  66| 0F B6 CB		    movzx cx, bl        ; cx = 009bh

 00000011			.data
 00000011 9B			    byte1 byte 9bh
 00000012 A69B			    word1 word 0a69bh
 0000007D			.code
 0000007D  0F B7 05		    movzx eax, word1    ; eax = 0000a69bh
	   00000012 R
 00000084  0F B6 15		    movzx edx, byte1    ; edx = 0000009bh
	   00000011 R
 0000008B  66| 0F B6 0D		    movzx cx, byte1     ; cx = 009bh
	   00000011 R

 00000014			.data
 00000014 8F			    byteVal2 byte 10001111b
 00000093			.code
 00000093  B8 00000000		    mov eax, 0
 00000098  66| 0F BE 05		    movsx ax, byteVal2  ; ax = FF8Fh
	   00000014 R

 000000A0  66| BB A69B		    mov bx, 0a69bh
 000000A4  0F BF C3		    movsx eax, bx       ; eax = ffffa69bh
 000000A7  0F BE D3		    movsx edx, bl       ; edx = ffffff9bh
 000000AA  66| 0F BE CB		    movsx cx, bl        ; cx = ff9bh

				    ; 4-1-6
 00000015			.data
 00000015 00			    saveflags byte ?
 000000AE			.code
 000000AE  B8 00000000		    mov eax, 0
 000000B3  9F			    lahf
 000000B4  88 25 00000015 R	    mov saveflags, ah

 000000BA  B8 00000000		    mov eax, 0
 000000BF  8A 25 00000015 R	    mov ah, saveflags
 000000C5  9E			    sahf

				    ; 4-1-7
 00000016			.data
 00000016 5555			    var4 word 5555h
 000000C6			.code
 000000C6  B8 43214321		    mov eax, 43214321h
 000000CB  BB 56785678		    mov ebx, 56785678h
 000000D0  66| 93		    xchg ax, bx
 000000D2  86 E0		    xchg ah, al
 000000D4  66| 87 1D		    xchg var4, bx
	   00000016 R
 000000DB  93			    xchg eax, ebx

 00000018			.data
 00000018 6666			    var5 word 6666h
 0000001A 7777			    var6 word 7777h
 000000DC			.code
 000000DC  66| A1		    mov ax, var5
	   00000018 R
 000000E2  66| 87 05		    xchg ax, var6
	   0000001A R
 000000E9  66| A3		    mov var5, ax
	   00000018 R

				    ; 4-1-8
 0000001C			.data
 0000001C 10 20 30 40 50	    arrayB byte 10h, 20h, 30h, 40h, 50h
 00000021 0100 0200 0300	    arrayW word 100h, 200h, 300h
 00000027 00010000		    arrayD dword 10000h, 20000h
	   00020000
 000000EF			.code
 000000EF  A0 0000001C R	    mov al, arrayB          ; al = 10h
 000000F4  A0 0000001D R	    mov al, [arrayB + 1]    ; al = 20h
 000000F9  A0 0000001D R	    mov al, arrayB + 1      ; al = 20h
 000000FE  A0 0000001E R	    mov al, [arrayB + 2]    ; al = 30h
 00000103  A0 00000030 R	    mov al, [arrayB + 20]   ; outside the array

 00000108  66| A1		    mov ax, arrayW          ; ax = 100h
	   00000021 R
 0000010E  66| A1		    mov ax, [arrayW + 2]    ; ax = 200h
	   00000023 R

 00000114  A1 00000027 R	    mov eax, arrayD         ; eax = 10000h
 00000119  A1 0000002B R	    mov eax, [arrayD + 4]   ; eax = 20000h

				    invoke ExitProcess, 0
 0000011E  6A 00	   *	    push   +000000000h
 00000120  E8 00000000 E   *	    call   ExitProcess
 00000125			main endp
				end main
Microsoft (R) Macro Assembler Version 14.35.32216.1	    07/12/23 19:53:12
4-1-3.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000002F DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000125 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000125 Public STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
arrayB . . . . . . . . . . . . .	Byte	 0000001C _DATA	
arrayD . . . . . . . . . . . . .	DWord	 00000027 _DATA	
arrayW . . . . . . . . . . . . .	Word	 00000021 _DATA	
byte1  . . . . . . . . . . . . .	Byte	 00000011 _DATA	
byteVal1 . . . . . . . . . . . .	Byte	 00000010 _DATA	
byteVal2 . . . . . . . . . . . .	Byte	 00000014 _DATA	
count  . . . . . . . . . . . . .	Word	 0000000C _DATA	
oneByte  . . . . . . . . . . . .	Byte	 00000005 _DATA	
oneDword . . . . . . . . . . . .	DWord	 00000008 _DATA	
oneWord  . . . . . . . . . . . .	Word	 00000006 _DATA	
saveflags  . . . . . . . . . . .	Byte	 00000015 _DATA	
signedVal  . . . . . . . . . . .	Word	 0000000E _DATA	
var1 . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
var2 . . . . . . . . . . . . . .	Word	 00000001 _DATA	
var3 . . . . . . . . . . . . . .	Word	 00000003 _DATA	
var4 . . . . . . . . . . . . . .	Word	 00000016 _DATA	
var5 . . . . . . . . . . . . . .	Word	 00000018 _DATA	
var6 . . . . . . . . . . . . . .	Word	 0000001A _DATA	
word1  . . . . . . . . . . . . .	Word	 00000012 _DATA	

	   0 Warnings
	   0 Errors
