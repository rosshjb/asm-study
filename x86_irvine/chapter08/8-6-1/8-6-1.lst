Microsoft (R) Macro Assembler Version 14.35.32216.1	    07/28/23 00:37:46
	8-6-1.as					     Page 1 - 1


				title 8-6-1.asm

				.386
				.model flat, stdcall
				.stack 4096

				includelib irvine32.lib

				WriteHex proto
				Crlf proto
				WaitMsg proto
				ExitProcess proto, dwExitCode:dword

 00000000			.data
 00000000 78			    charVal byte 'x'

 00000001 1234			    word1   word 1234h
 00000003 4111			    word2   word 4111h

 00000005			    longval qword 1234567800ABCDEFh
	   1234567800ABCDEF
 00000000			.code
 00000000			main proc
 00000000  E8 00000066		    call mySub1

 00000005  6A 0A		    push 10
 00000007  E8 00000064		    call mySub2

 0000000C  6A 14		    push 20
 0000000E  E8 0000006B		    call mySub3

 00000013  6A 78		    push 'x'
 00000015  E8 00000072		    call Uppercase

 0000001A  0F B6 05		    movzx eax, charVal          ; move with zero extension
	   00000000 R
 00000021  50			    push eax
 00000022  E8 00000065		    call Uppercase

 00000027  0F B7 05		    movzx eax, word1
	   00000001 R
 0000002E  50			    push eax
 0000002F  0F B7 05		    movzx eax, word2
	   00000003 R
 00000036  50			    push eax
 00000037  E8 00000065		    call AddTwo                 ; sum is in EAX

 0000003C  FF 35 00000009 R	    push dword ptr longVal + 4  ; high doubleword
 00000042  FF 35 00000005 R	    push dword ptr longVal      ; low doubleword
 00000048  E8 0000005F		    call WriteHex64
 0000004D  E8 00000000 E	    call Crlf

 00000052  E8 0000006C		    call Example1

 00000057  E8 00000076		    call Example2

 0000005C  E8 00000000 E	    call WaitMsg

 00000061  B9 00000000		    mov ecx, 0
 00000066  E8 00000000 E	    call ExitProcess
 0000006B			main endp

 0000006B			mySub1 proc uses ecx edx
 0000006B  51		   *	    push   ecx
 0000006C  52		   *	    push   edx
				    ret
 0000006D  5A		   *	    pop    edx
 0000006E  59		   *	    pop    ecx
 0000006F  C3		   *	    ret    00000h
 00000070			mySub1 endp

 00000070			mySub2 proc uses ecx edx
 00000070  51		   *	    push   ecx
 00000071  52		   *	    push   edx
 00000072  55			    push ebp            ; save base pointer
 00000073  8B EC		    mov ebp, esp        ; base of stack frame

 00000075  8B 45 08		    mov eax, [ebp + 8]  ; wrong location!

 00000078  5D			    pop ebp             ; restore base pointer
 00000079  5A		   *	    pop    edx
 0000007A  59		   *	    pop    ecx
 0000007B  C2 0004		    ret 4               ; clean up arguments from the stack
 0000007E			mySub2 endp

 0000007E			mySub3 proc uses ecx edx param:dword
 0000007E  55		   *	    push   ebp
 0000007F  8B EC	   *	    mov    ebp, esp
 00000081  51		   *	    push   ecx
 00000082  52		   *	    push   edx
 00000083  8B 45 08		    mov eax, [ebp + 8]  ; EAX = 20

 00000086  5A		   *	    pop    edx
 00000087  59		   *	    pop    ecx
 00000088  C9		   *	    leave  
 00000089  C2 0004		    ret 4               ; clean up arguments from the stack
 0000008C			mySub3 endp
8-6-1.asm(77) : warning A6004:procedure argument or local not referenced : param

 0000008C			Uppercase proc
 0000008C  55			    push ebp
 0000008D  8B EC		    mov ebp, esp

 0000008F  8A 44 24 08		    mov al, [esp + 8]   ; AL = character
 00000093  3C 61		    cmp al, 'a'         ; less than 'a'?
 00000095  72 06		    jb L1               ; yes: do nothing
 00000097  3C 7A		    cmp al, 'z'         ; greater than 'z'?
 00000099  77 02		    ja L1               ; yes: do nothing
 0000009B  2C 20		    sub al, 32          ; no: convert it
 0000009D			L1:
 0000009D  5D			    pop ebp
 0000009E  C2 0004		    ret 4               ; clean up arguments from the stack
 000000A1			Uppercase endp

 000000A1			AddTwo proc
 000000A1  8B 44 24 04		    mov eax, [esp + 4]
 000000A5  03 44 24 08		    add eax, [esp + 8]

 000000A9  C2 0008		    ret 8
 000000AC			AddTwo endp

 000000AC			WriteHex64 proc
 000000AC  55			    push ebp
 000000AD  8B EC		    mov ebp, esp

 000000AF  8B 45 0C		    mov eax, [ebp + 12]     ; high doubleword
 000000B2  E8 00000000 E	    call WriteHex
 000000B7  8B 45 08		    mov eax, [ebp + 8]      ; low doubleword
 000000BA  E8 00000000 E	    call WriteHex

 000000BF  5D			    pop ebp
 000000C0  C2 0008		    ret 8
 000000C3			WriteHex64 endp

 000000C3			Example1 proc
				    local var1:byte         ; EBP - 4 = ESP (byte variable, but dword aligned)

 000000C3  55		   *	    push   ebp
 000000C4  8B EC	   *	    mov    ebp, esp
 000000C6  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000000C9  C6 45 FF 12		    mov var1, 12h           ; var1 = [EBP - 1], not [EBP - 4]
 000000CD  8A 45 FF		    mov al, var1            ; like 'byte push but doubleword aligned'

				    ret
 000000D0  C9		   *	    leave  
 000000D1  C3		   *	    ret    00000h
 000000D2			Example1 endp

 000000D2			Example2 proc
				    local temp:dword, SwapFlag:byte     ; EBP - 8 = ESP

 000000D2  55		   *	    push   ebp
 000000D3  8B EC	   *	    mov    ebp, esp
 000000D5  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 000000D8  C7 45 FC		    mov temp, 12345678h                 ; temp = [EBP - 4]
	   12345678
 000000DF  C6 45 FB 90		    mov SwapFlag, 90h                   ; SwapFlag = [EBP - 5], not [EBP - 8]

				    ret
 000000E3  C9		   *	    leave  
 000000E4  C3		   *	    ret    00000h
 000000E5			Example2 endp

				end main
Microsoft (R) Macro Assembler Version 14.35.32216.1	    07/28/23 00:37:46
	8-6-1.as					     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000000D DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000E5 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AddTwo . . . . . . . . . . . . .	P Near	 000000A1 _TEXT	Length= 0000000B Public STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Example1 . . . . . . . . . . . .	P Near	 000000C3 _TEXT	Length= 0000000F Public STDCALL
  var1 . . . . . . . . . . . . .	Byte	 bp - 00000001
Example2 . . . . . . . . . . . .	P Near	 000000D2 _TEXT	Length= 00000013 Public STDCALL
  temp . . . . . . . . . . . . .	DWord	 bp - 00000004
  SwapFlag . . . . . . . . . . .	Byte	 bp - 00000005
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Uppercase  . . . . . . . . . . .	P Near	 0000008C _TEXT	Length= 00000015 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000009D _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex64 . . . . . . . . . . .	P Near	 000000AC _TEXT	Length= 00000017 Public STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000006B Public STDCALL
mySub1 . . . . . . . . . . . . .	P Near	 0000006B _TEXT	Length= 00000005 Public STDCALL
mySub2 . . . . . . . . . . . . .	P Near	 00000070 _TEXT	Length= 0000000E Public STDCALL
mySub3 . . . . . . . . . . . . .	P Near	 0000007E _TEXT	Length= 0000000E Public STDCALL
  param  . . . . . . . . . . . .	DWord	 bp + 00000008


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
charVal  . . . . . . . . . . . .	Byte	 00000000 _DATA	
longval  . . . . . . . . . . . .	QWord	 00000005 _DATA	
word1  . . . . . . . . . . . . .	Word	 00000001 _DATA	
word2  . . . . . . . . . . . . .	Word	 00000003 _DATA	

	   1 Warnings
	   0 Errors
